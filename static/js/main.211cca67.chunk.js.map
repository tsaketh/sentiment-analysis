{"version":3,"sources":["Components/emoji_0.png","Components/emoji_1.png","Components/emoji_2.png","Components/emoji_3.png","Components/emoji_4.png","Components/Card.js","Components/Header.js","Components/Textbox.js","Containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","sentiment_id","className","src","emoji_0","emoji_1","emoji_2","emoji_3","emoji_4","alt","height","width","Header","Textbox","onInput","getSentiment","type","placeholder","onChange","value","onClick","App","event","setState","inputfield","target","fetch","method","headers","body","JSON","stringify","phrase","state","then","res","json","sentiment","catch","alert","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"oHAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,kRCsB5BC,EAfF,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAEX,OACI,yBAAKC,UAAW,uDACZ,yBAAKC,IAAuB,IAAjBF,EAAoBG,IACD,IAAjBH,EAAoBI,IACH,IAAjBJ,EAAoBK,IACH,IAAjBL,EAAoBM,IAAQC,IAASC,IAAI,QAAQC,OAAO,QAAQC,MAAM,SACnF,6BACI,4BARS,CAAC,EAAK,WAAW,EAAK,oBAAqB,EAAI,UAAW,EAAI,oBAAqB,EAAI,aAQ3EV,OCNtBW,EARA,WACX,OACI,6BACI,wBAAIV,UAAU,oBAAd,wBCcGW,EAjBC,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,aACvB,OACI,6BACI,8BACIb,UAAU,8EACVc,KAAK,OACLC,YAAY,mDACZC,SAAUJ,IACd,2BACIZ,UAAU,uEACVc,KAAK,SACLG,MAAM,iBACNC,QAASL,MCmCVM,G,wDAtCb,aAAc,IAAD,8BACX,gBAMFP,QAAU,SAACQ,GACT,EAAKC,SACH,CAACC,WAAYF,EAAMG,OAAON,SATjB,EAYbJ,aAAe,WACbW,MAAM,uEAAwE,CAC5EC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,OAAQ,EAAKC,MAAMT,eAEpBU,MAAK,SAAAC,GAAQ,OAAOA,EAAIC,UACxBF,MAAK,SAAAG,GACJ,EAAKd,SAAS,CAACtB,aAAaoC,EAAUpC,kBAEvCqC,MAAMC,QAvBT,EAAKN,MAAQ,CACXT,WAAY,GACZvB,aAAc,IAJL,E,qDA4BX,OACA,yBAAKC,UAAU,MACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAASa,aAAcyB,KAAKzB,aAAcD,QAAS0B,KAAK1B,UACxD,kBAAC,EAAD,CAAMb,aAAcuC,KAAKP,MAAMhC,oB,GAjCnBwC,cCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdlB,OAAM,SAAAmB,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.211cca67.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/emoji_0.f890044b.png\";","module.exports = __webpack_public_path__ + \"static/media/emoji_1.fad0d218.png\";","module.exports = __webpack_public_path__ + \"static/media/emoji_2.5518e764.png\";","module.exports = __webpack_public_path__ + \"static/media/emoji_3.02543668.png\";","module.exports = __webpack_public_path__ + \"static/media/emoji_4.9f6dc92a.png\";","import React from 'react';\r\nimport emoji_0 from './emoji_0.png';\r\nimport emoji_1 from './emoji_1.png';\r\nimport emoji_2 from './emoji_2.png';\r\nimport emoji_3 from './emoji_3.png';\r\nimport emoji_4 from './emoji_4.png';\r\n\r\nconst Card = ({sentiment_id}) => {\r\n    const sentiment_dict={'0': 'negative','1': 'somewhat negative', '2':'neutral', '3':'somewhat positive', '4':'positivie'} \r\n    return (\r\n        <div className= 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={(sentiment_id === 0)?emoji_0:\r\n                        (sentiment_id === 1)?emoji_1:\r\n                        (sentiment_id === 2)?emoji_2:\r\n                        (sentiment_id === 3)?emoji_3:emoji_4} alt=\"<../>\" height='200px' width='auto'/>\r\n            <div>\r\n                <h2>{ sentiment_dict[sentiment_id] }</h2>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\n\r\nconst Header = ()=> {\r\n    return (\r\n        <div>\r\n            <h1 className='f1 myFont myBlue'>Know The Sentiment</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Textbox = ({onInput, getSentiment}) => {\r\n    return (\r\n        <div>\r\n            <textarea \r\n                className='db border-box w-100 measure center ba pa2 br2 mb2 b--green bg-lightest-blue' \r\n                type=\"text\" \r\n                placeholder='Enter a review or a phrase to know its sentiment'\r\n                onChange={onInput}/>\r\n            <input \r\n                className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\" \r\n                type=\"submit\" \r\n                value=\"View Sentiment\" \r\n                onClick={getSentiment}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Textbox;","import React, { Component } from 'react';\nimport './App.css';\nimport '../Components/Card';\nimport '../Components/Header';\nimport '../Components/Textbox';\nimport Header from '../Components/Header';\nimport Textbox from '../Components/Textbox';\nimport Card from '../Components/Card';\nimport 'tachyons';\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      inputfield: '',\n      sentiment_id: ''\n    }\n  }\n  onInput = (event) => {\n    this.setState(\n      {inputfield: event.target.value}\n    )\n  }\n  getSentiment = () => {\n    fetch(\"https://ts-sentiment-analysis-8991.herokuapp.com/api/v1/getsentiment\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      }, \n      body: JSON.stringify({\n        phrase: this.state.inputfield\n      })\n    }).then(res => {return res.json()})\n      .then(sentiment => {\n        this.setState({sentiment_id:sentiment.sentiment_id})\n      })\n      .catch(alert)\n  }\n  render(){\n    return(\n    <div className='tc'>\n      <Header />\n      <Textbox getSentiment={this.getSentiment} onInput={this.onInput}/>\n      <Card sentiment_id={this.state.sentiment_id}/>\n    </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}